env:
  OLLAMA_ENDPOINT: http://localhost:11434
  OLLAMA_MODEL: llama3.2
  ES_ENDPOINT: https://localhost:9200
  ES_USERNAME: admin
  ES_PASSWORD: $[[keystore.ES_PASSWORD]]
  WEB_BINDING: 0.0.0.0:9000
  API_BINDING: 0.0.0.0:2900

coco:
  ollama:
    endpoint: $[[env.OLLAMA_ENDPOINT]]
    model: $[[env.OLLAMA_MODEL]]
    keepalive: 30m

## Cleanup exists data:
# curl -u admin:45ff432a5428ade77c7b -k -XDELETE   https://localhost:9200/_template/coco-search
# curl -u admin:45ff432a5428ade77c7b -k -XDELETE   https://localhost:9200/_template/coco
# curl -u admin:45ff432a5428ade77c7b -k -XDELETE  https://localhost:9200/_scripts/coco-query-string
# curl -u admin:45ff432a5428ade77c7b -k -XDELETE   https://localhost:9200/coco_*
elastic:
  elasticsearch: prod
  enabled: true
  store:
    enabled: false
  orm:
    enabled: true
    index_prefix: "coco_"
    override_exists_template: true
    index_templates:
      "coco-search": |
        {
          "order": 10,
          "index_patterns": [
            "coco_*"
          ],
          "settings": {
            "index": {
              "analysis": {
                "char_filter": {
                    "tsconvert" : {
                        "type" : "stconvert",
                        "delimiter" : ",",
                        "keep_both" : false,
                        "convert_type" : "t2s"
                    }
                 },
                "tokenizer": {
                      "my_pinyin": {
                        "type": "pinyin",
                        "keep_first_letter": true,
                        "keep_separate_first_letter": true,
                        "keep_full_pinyin": true,
                        "keep_original": false,
                        "limit_first_letter_length": 16,
                        "lowercase": true
                      }
                    },
                "analyzer": {
                  "pinyin_analyzer": {
                     "tokenizer": "my_pinyin"
                   },
                  "combined_text_analyzer": {
                    "char_filter": ["tsconvert"],
                    "filter": [
                      "lowercase",
                      "asciifolding",
                      "word_delimiter",
                      "unique"
                    ],
                    "tokenizer": "classic"
                  }
                }
              }
            }
          },
          "mappings": {}
        }

    search_templates:
      "coco-query-string": |
        {
            "from": "{{from}}",
            "size": "{{size}}",
            "_source": {
                "includes": [ "{{#source}}","{{.}}","{{/source}}"],
                "excludes": [ "payload.*","content" ]
            },
            "query": {
              "bool": {
                "must": {{#toJson}}must_clauses{{/toJson}},
                "must_not": [],
                "should": [

                  {{#query}}
                  {
                    "prefix": {
                      "{{field}}.keyword": {
                        "value": "{{query}}",
                        "boost": 10
                      }
                    }
                  },
                  {
                    "match_phrase_prefix": {
                      "{{field}}": {
                        "query": "{{query}}",
                        "boost": 2
                      }
                    }
                  },
                  {
                    "match": {
                      "{{field}}": {
                        "query": "{{query}}",
                        "fuzziness": "AUTO",
                        "max_expansions": 10,
                        "prefix_length": 2,
                        "fuzzy_transpositions": true
                      }
                    }
                  },
                  {
                    "query_string": {
                      "fields": ["{{field}}","{{field}}.keyword^10","combined_fulltext"],
                      "query": "{{query}}",
                      "fuzziness": "AUTO",
                      "fuzzy_prefix_length": 2,
                      "fuzzy_max_expansions": 10,
                      "fuzzy_transpositions": true,
                      "allow_leading_wildcard": false
                    }
                  },{"match": {
                    "{{field}}.pinyin": "{{query}}"
                    }}
                  {{/query}}

                
                ]
              }
            }
        }

elasticsearch:
  - name: prod
    enabled: true
    endpoints:
      - $[[env.ES_ENDPOINT]]
    discovery:
      enabled: false
    basic_auth:
      username: $[[env.ES_USERNAME]]
      password: $[[env.ES_PASSWORD]]

api:
  enabled: true
  websocket:
    enabled: false

  network:
    binding: $[[env.API_BINDING]]

web:
  enabled: true
  embedding_api: true
  network:
    binding: $[[env.WEB_BINDING]]
  tls:
    enabled: false
    skip_insecure_verify: true
    default_domain: "localhost:2900"
    #    default_domain: "api.coco.rs"
    auto_issue:
      enabled: false
      email: "hello@infinilabs.com"
      include_default_domain: true
      domains:
        - "www.coco.rs"
      provider:
        tencent_dns:
          secret_id: $[[keystore.TENCENT_DNS_ID]] #./bin/coco keystore add TENCENT_DNS_ID
          secret_key: $[[keystore.TENCENT_DNS_KEY]] #./bin/coco keystore add TENCENT_DNS_KEY


connector:
  google_drive: # get your token here: https://developers.google.com/drive/api/quickstart/go
    enabled: true
    queue:
      name: indexing_documents
#    credential_file: credentials.json
    credential:
      "client_id": "XXXX"
      "project_id": "XXXX"
      "auth_uri": "https://accounts.google.com/o/oauth2/auth"
      "token_uri": "https://oauth2.googleapis.com/token"
      "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs"
      "client_secret": "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"
      "redirect_uris":  "http://localhost:9000/connector/google_drive/oauth_redirect"
      "javascript_origins": [ "http://localhost:9000" ]
    interval: 10s
    skip_invalid_token: true
  yuque:
    enabled: false
    queue:
      name: indexing_documents
    token: $[[keystore.YUQUE_TOKEN]]
    interval: 10s
    indexing_books: true
    indexing_docs: true
    indexing_groups: true
    indexing_users: true
    include_private_book: false
    include_private_doc: false
    skip_invalid_token: true
  hugo_site:
    enabled: false
    interval: 60s
    queue:
      name: indexing_documents

##background jobs
pipeline:
  - name: merge_documents
    auto_start: true
    keep_running: true
    processor:
      - indexing_merge:
          input_queue: "indexing_documents"
          idle_timeout_in_seconds: 1
          elasticsearch: "prod"
          index_name: "coco_document"
          key_field: "id"
          output_queue:
            name: "merged_documents"
            label:
              tag: "merged"
          worker_size: 1
          bulk_size_in_kb: 10240
  - name: ingest_documents
    auto_start: true
    keep_running: true
    processor:
      - bulk_indexing:
          bulk:
            compress: true
            batch_size_in_mb: 10
            batch_size_in_docs: 10240
          consumer:
            fetch_max_messages: 100
          queues:
            type: indexing_merge
            tag: "merged"


http_client:
  default:
    proxy:
      enabled: true
      default_config:
        http_proxy: http://127.0.0.1:7890
        socket5_proxy: socks5://127.0.0.1:7890
      override_system_proxy_env: true #override system proxy's environment settings with this proxy settings
      permitted:
        - "google.com"
      denied:
        - "localhost"
        - "www.yuque.com"
        - "yuque.com"
        - "infinilabs.com"
        - "api.coco.rs"
      domains:
        "github.com":
          http_proxy: http://127.0.0.1:7890
          socket5_proxy: socks5://127.0.0.1:7890

security:
  enabled: true
  oauth:
    enabled: true
    #provider:
    # github:
        # xxx
    client_id: "Ov23liMDumMpcItvIzLx"
    client_secret: "f732709afc30ff6aeacff21bb6df30edef92e4cd"
#    default_roles: ["ReadonlyUI","DATA"] #default for all sso users if no specify roles was defined
    role_mapping:
      medcl: ["Administrator"]
    authorize_url: "https://github.com/login/oauth/authorize"
    token_url: "https://github.com/login/oauth/access_token"
    redirect_url: ""
    success_page: "/auth/sso_success"
    failed_page: "/auth/sso_failure"
    scopes: []
